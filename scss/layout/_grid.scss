// Container
%container {
	margin-right: auto;
	margin-bottom: get-rems(map-get($grid, spacing));
	margin-left: auto;
	padding-right: get-rems(map-get($grid, spacing));
	padding-left: get-rems(map-get($grid, spacing));
	overflow: hidden;
	word-wrap: break-word;
}

.container {
	@each $key, $value in $grid-breakpoints {
		@include responsive(min-width, $value) {
			@if map-has-key($container-max-widths, $key) {
				max-width: get-rems(map-get($container-max-widths, $key));
			}
		}
	}

	&,
	&-fluid {
		@extend %container;
	}
}

// Row
.row {
	display: flex;
	flex-wrap: wrap;
	margin-right: get-rems(map-get($grid, spacing) * -1);
	margin-left: get-rems(map-get($grid, spacing) * -1);
	overflow: hidden;
}

// Columns
%grid-column {
	position: relative;
	padding-right: get-rems(map-get($grid, spacing));
	padding-left: get-rems(map-get($grid, spacing));
	width: 100%;
	min-height: get-rems(1px);
	overflow: hidden;
}

@each $key, $value in $grid-breakpoints {
	@for $column from 1 through map-get($grid, columns) {
		.col-#{$key}-#{$column} {
			@extend %grid-column;
		}
	}

	.col-#{$key},
	.col-#{$key}-auto {
		@extend %grid-column;
	}

	@if (get-number($value) > 0) {
		@include responsive(min-width, $value) {
			@include grid-columns($key);
			@include flex-helpers($key);
		}
	} @else {
		@include grid-columns($key);
		@include flex-helpers($key);
	}
}
