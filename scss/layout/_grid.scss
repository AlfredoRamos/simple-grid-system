.container-fluid {
	margin-left: auto;
	margin-right: auto;
	overflow: hidden;
	word-wrap: break-word;
	@include rem(margin-bottom, map-get($grid, 'spacing'));
	@include rem(padding-left, map-get($grid, 'spacing'));
	@include rem(padding-right, map-get($grid, 'spacing'));
}

.container {
	@extend .container-fluid;

	@each $key, $value in $grid-breakpoints {
		@include responsive(min-width, calc-rems($value, $rem-base)) {
			@if map-has-key($container-max-widths, $key) {
				@include rem(max-width, map-get($container-max-widths, $key));
			}
		}
	}
}

.row {
	display: flex;
	flex-wrap: wrap;
	overflow: hidden;
	@include rem(margin-left, (map-get($grid, 'spacing') * -1));
	@include rem(margin-right, (map-get($grid, 'spacing') * -1));
}

%grid-column {
	position: relative;
	width: 100%;
	min-height: 1px;
	overflow: hidden;
	@include rem(padding-left, map-get($grid, 'spacing'));
	@include rem(padding-right, map-get($grid, 'spacing'));
}

@each $key, $value in $grid-breakpoints {
	@for $column from 1 through map-get($grid, 'columns') {
		.col-#{$key}-#{$column} {
			@extend %grid-column;
		}
	}

	.col-#{$key},
	.col-#{$key}-auto {
		@extend %grid-column;
	}

	@if (parse-int($value) > 0) {
		@include responsive(min-width, calc-rems($value, $rem-base)) {
			@include grid-columns($key, map-get($grid, 'columns'));
		}
	} @else {
		@include grid-columns($key, map-get($grid, 'columns'));
	}
}
