/// Generate a dynamic media query
/// @param string	$property		Property name
/// @param number	$breakpoint		Breakpoint size
/// @content SCSS/CSS code
@mixin responsive($property, $breakpoint) {
	@media only screen and (#{$property}: get-rems($breakpoint)) {
		@content;
	}
}

/// Generate CSS classes for grid columns
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin grid-columns($breakpoint, $columns: map-get($grid, columns)) {
	// Width
	.col-#{$breakpoint} {
		flex-basis: 0;
		flex-grow: 1;
		max-width: 100%;
	}

	.col-#{$breakpoint}-auto {
		flex: 0 0 auto;
		width: auto;
		max-width: none;
	}

	@for $column from 1 through $columns {
		.col-#{$breakpoint}-#{$column} {
			flex: 0 0 percentage($column / $columns);
			max-width: percentage($column / $columns);
		}
	}
}

/// Generate CSS classes for flex direction,
/// order, alignment and offset
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin flex-helpers($breakpoint, $columns: map-get($grid, columns)) {
	// Direction
	@each $key in (row, row-reverse, column, column-reverse) {
		.direction-#{$breakpoint}-#{$key} {
			flex-direction: $key;
		}
	}

	// Order
	@for $column from 1 through map-get($grid, columns) {
		.order-#{$breakpoint}-#{$column} {
			order: $column;
		}
	}

	// Vertical alignment
	@each $key in (top, middle, bottom) {
		.#{$key}-#{$breakpoint} {
			@if ($key == top) {
				align-items: flex-start;
			} @else if ($key == middle) {
				align-items: center;
			} @else if ($key == bottom) {
				align-items: flex-end;
			}
		}
	}

	// Horizontal alignment
	@each $key, $value in (start, center, end, around, between) {
		.#{$key}-#{$breakpoint} {
			@if ($key == start) {
				justify-content: flex-start;
			} @else if ($key == center) {
				justify-content: center;
			} @else if ($key == end) {
				justify-content: flex-end;
			} @else if ($key == around) {
				justify-content: space-around;
			} @else if ($key == between) {
				justify-content: space-between;
			}
		}
	}

	// Offset
	@for $column from 0 through $columns {
		@if ($column > 0) {
			.offset-#{$breakpoint}-#{$column} {
				margin-left: percentage($column / $columns);
			}
		} @else {
			.offset-#{$breakpoint}-auto {
				margin-left: auto;
			}
		}
	}
}
