/// Generate a dynamic media query
/// @param string	$property		Property name
/// @param number	$breakpoint		Breakpoint size
/// @content SCSS/CSS code
@mixin responsive($property, $breakpoint) {
	@media only screen and (#{$property}: get-rems($breakpoint)) {
		@content;
	}
}

/// Generate CSS classes for grid columns
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin grid-columns($breakpoint, $columns: map-get($grid, columns)) {
	// Width
	.col-#{$breakpoint} {
		@include flex-basis(0);
		@include flex-grow(1);
		max-width: 100%;
	}

	.col-#{$breakpoint}-auto {
		@include flex(0 0 auto);
		width: auto;
		max-width: none;
	}

	@for $column from 1 through $columns {
		.col-#{$breakpoint}-#{$column} {
			@include flex(0 0 percentage($column / $columns));
			max-width: percentage($column / $columns);
		}
	}
}

/// Generate CSS classes for flex ordering,
/// alignments and offsets
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin flex-helpers($breakpoint, $columns: map-get($grid, columns)) {
	// Order
	@for $column from 1 through map-get($grid, columns) {
		.order-#{$breakpoint}-#{$column} {
			@include flex-order($column);
		}
	}

	// Vertical alignment
	@each $key in (top, middle, bottom) {
		.#{$key}-#{$breakpoint} {
			@include flex-align($key);
		}
	}

	// Horizontal alignment
	@each $key, $value in (start, center, end, around, between) {
		.#{$key}-#{$breakpoint} {
			@include flex-align($key);
		}
	}

	// Offset
	@for $column from 0 through $columns {
		.offset-#{$breakpoint}-#{$column} {
			@if ($column > 0) {
				margin-left: percentage($column / $columns);
			} @else {
				margin-left: auto; // Reset
			}
		}
	}
}

/// Cross-browser support for flex value
/// for the display property
@mixin display-flex {
	display: -ms-flexbox;
	display: flex;
}

/// Cross-browser support for the flex property
/// @param list $value	List of values
@mixin flex($list) {
	-ms-flex: $list;
	flex: $list;
}

/// Cross-browser support for the flex-wrap property
/// @param string $value	Wrap style
@mixin flex-wrap($style) {
	-ms-flex-wrap: $style;
	flex-wrap: $style;
}

/// Cross-browser support for the flex-basis property
/// @param number $number	Length
@mixin flex-basis($number) {
	-ms-flex-preferred-size: $number;
	flex-basis: $number;
}

/// Cross-browser support for the flex-grow property
/// @param number $number	Length
@mixin flex-grow($number) {
	-ms-flex-positive: $number;
	flex-grow: $number;
}

/// Cross-browser support for the flex order property
/// @param number $order	Order within the container
@mixin flex-order($order) {
	-ms-flex-order: $order;
	order: $order;
}

/// Cross browser support for flex alignments
/// @param string $position	Position name
@mixin flex-align($position) {
	// Vertical
	@if ($position == top) {
		-ms-flex-align: start;
		align-items: flex-start;
	} @else if ($position == middle) {
		-ms-flex-align: center;
		align-items: center;
	} @else if ($position == bottom) {
		-ms-flex-align: flex-end;
		align-items: end;
	}

	// Horizontal
	@if ($position == start) {
		-ms-flex-pack: start;
		justify-content: flex-start;
	} @else if ($position == center) {
		-ms-flex-pack: center;
		justify-content: center;
	} @else if ($position == end) {
		-ms-flex-pack: end;
		justify-content: flex-end;
	} @else if ($position == around) {
		-ms-flex-pack: distribute;
		justify-content: space-around;
	} @else if ($position == between) {
		-ms-flex-pack: justify;
		justify-content: space-between;
	}
}
