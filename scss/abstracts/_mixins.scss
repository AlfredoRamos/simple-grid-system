/// Generate a dynamic media query
/// @param string	$property		Property name
/// @param number	$breakpoint		Breakpoint size
/// @content SCSS/CSS code
@mixin responsive($property, $breakpoint) {
	@media only screen and (#{$property}: get-rems($breakpoint)) {
		@content;
	}
}

/// Generate CSS classes for grid columns
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin grid-columns($breakpoint, $columns: map-get($grid, columns)) {
	// Width
	.col-#{$breakpoint} {
		flex-basis: 0;
		flex-grow: 1;
		max-width: 100%;
	}

	.col-#{$breakpoint}-auto {
		flex: 0 0 auto;
		width: auto;
		max-width: none;
	}

	@for $column from 1 through $columns {
		.col-#{$breakpoint}-#{$column} {
			flex: 0 0 percentage($column / $columns);
			max-width: percentage($column / $columns);
		}
	}
}

/// Generate CSS classes for flex ordering,
/// alignments and offsets
/// @param string	$breakpoint	Breakpoint name
/// @param number	$columns	Total number of columns
@mixin flex-helpers($breakpoint, $columns: map-get($grid, columns)) {
	$flex-align: (
		vertical: (
			top: flex-start,
			middle: center,
			bottom: flex-end
		),
		horizontal: (
			start: flex-start,
			center: center,
			end: flex-end,
			around: space-around,
			between: space-between
		)
	);

	// Order
	@for $column from 1 through map-get($grid, columns) {
		.order-#{$breakpoint}-#{$column} {
			order: $column;
		}
	}

	// Vertical alignment
	@each $key, $value in map-get($flex-align, vertical) {
		.#{$key}-#{$breakpoint} {
			align-items: $value;
		}
	}

	// Horizontal alignment
	@each $key, $value in map-get($flex-align, horizontal) {
		.#{$key}-#{$breakpoint} {
			justify-content: $value;
		}
	}

	// Offset
	@for $column from 0 through $columns {
		.offset-#{$breakpoint}-#{$column} {
			@if ($column > 0) {
				margin-left: percentage($column / $columns);
			} @else {
				margin-left: auto; // Reset
			}
		}
	}
}
