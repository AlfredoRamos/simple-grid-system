/**
 * Simple Grid System
 * GitHub <https://github.com/AlfredoRamos/simple-grid-system>
 * @author Alfredo Ramos <alfredo.ramos@yandex.com>
 * @version 0.2.2
 * @copyright (c) 2015 Alfredo Ramos
 * @license GNU GPL-3.0+ <https://www.gnu.org/licenses/gpl-3.0.txt>
 */

//-------------------------------------------------------
// VARIABLES
//-------------------------------------------------------

// Number of columns
$grid-columns: 12;

// Column spacing (rem base 10)
// It should be < 4.5rem
$grid-spacing: 1rem; // 10/10

// CSS class names (without leading dot)
$column-class: 'col';	// Global
$column-xs-class: 'xs';	// Extra small
$column-sm-class: 'sm';	// Small
$column-md-class: 'md';	// Medium
$column-lg-class: 'lg';	// Large

// Media queries breakpoints (rem base 16)
$screen-xs: 30rem; // 480/16
$screen-sm: 48rem; // 768/16
$screen-md: 62rem; // 992/16
$screen-lg: 75rem; // 1200/16

// Maximum width (rem base 10)
$screen-sm-max-width: 75rem; // 750/10
$screen-md-max-width: 97rem; // 970/10
$screen-lg-max-width: 117rem; // 1170/10

//-------------------------------------------------------
// FUNCTIONS
//-------------------------------------------------------

// Get grid width
// @param	$column		Current column index
// @param	$columns	Number of columns (see $grid-columns)
@function grid-width($column, $columns) {
	@return $column * (100% / $columns);
}

// Convert a given value to integer
// @param	$n		The value to convert
@function parse-int($n) {
	@return $n / ($n * 0 + 1);
}

// Convert given pixels to rems
// @param	$pixels		The pixels to convert
// @param	$base		The rem base (optional).
@function calc-rems($pixels, $base: 10) {
	$rems: #{parse-int($pixels) / $base}rem;
	
	@if unit($pixels) == 'rem' {
		$rems: $pixels;
	}
	
	@return $rems;
}

// Convert given rems to pixels
// @param	$rems		The rems to convert
// @param	$base		The rem base (optional).
@function calc-pixels($rems, $base: 10) {
	$pixels: #{parse-int($rems) * $base}px;
	
	@if unit($rems) == 'px' {
		$pixels: $rems;
	}
	
	@return $pixels;
}

//-------------------------------------------------------
// MIXINS
//-------------------------------------------------------
@mixin border-box {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

@mixin responsive($property, $breakpoint) {
	@media only screen and (#{$property}: $breakpoint), (#{$property}: calc-pixels($breakpoint, 16)) {
		@content;
	}
}

@mixin grid-columns-helper($breakpoint, $columns) {
	@for $column from 1 through $columns {
		.#{$column-class}-#{$breakpoint}-#{$column} {
			width: grid-width($column, $columns);
		}
		
		.#{$column-class}-#{$breakpoint}-pull-#{$column} {
			right: grid-width($column, $columns);
		}
		
		.#{$column-class}-#{$breakpoint}-push-#{$column} {
			left: grid-width($column, $columns);
		}
		
		.#{$column-class}-#{$breakpoint}-offset-#{$column} {
			margin-left: grid-width($column, $columns);
		}
	}

	.#{$column-class}-#{$breakpoint}-pull-0 {
		right: auto;
	}

	.#{$column-class}-#{$breakpoint}-push-0 {
		left: auto;
	}

	.#{$column-class}-#{$breakpoint}-offset-0 {
		margin-left: 0;
	}
}

@mixin grid-columns($columns: 12) {
	// Global
	[class*="#{$column-class}-"] {
		padding-left: $grid-spacing;
		padding-right: $grid-spacing;
		position: relative;
		overflow: hidden;
	}
	
	// Extra small columns
	[class*="#{$column-class}-#{$column-xs-class}-"] {
		float: left;
	}
	
	@include grid-columns-helper($column-xs-class, $columns);
	
	// Small columns
	@include responsive(min-width, $screen-sm) {
		[class*="#{$column-class}-#{$column-sm-class}-"] {
			float: left;
		}
		
		@include grid-columns-helper($column-sm-class, $columns);
	}
	
	// Medium columns
	@include responsive(min-width, $screen-md) {
		[class*="#{$column-class}-#{$column-md-class}-"] {
			float: left;
		}
		
		@include grid-columns-helper($column-md-class, $columns);
	}
	
	// Large columns
	@include responsive(min-width, $screen-lg) {
		[class*="#{$column-class}-#{$column-lg-class}-"] {
			float: left;
		}
		
		@include grid-columns-helper($column-lg-class, $columns);
	}
}

// Slightly modified version of the rem() mixin by Hugo Giraudel
// http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		} @else {
			$unit: unit($value);
			
			@if $unit == 'px' {
				$px : append($px,  calc-pixels($value));
				$rem: append($rem, calc-rems($value));
			}
			
			@if $unit == 'rem' {
				$px : append($px,  calc-pixels($value));
				$rem: append($rem, calc-rems($value));
			}
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px; // For IE < 8
		#{$property}: $rem;
	}
}

//-------------------------------------------------------
// USAGE
//-------------------------------------------------------
* {
	&,
	&:before,
	&:after {
		@include border-box;
	}
}

// Required to set the rem base to 10
html {
	font-size: 62.5%;
}

// Clearfix helper
.clearfix {
	zoom: 1; // For IE
	
	&:before,
	&:after {
		content: "";
		display: table;
	}
	
	&:after {
		clear: both;
	}
}

.container-fluid {
	margin-left: auto;
	margin-right: auto;
	overflow: hidden;
	word-wrap: break-word; // Optional
	@include rem(margin-bottom, $grid-spacing);
	@include rem(padding-left, $grid-spacing);
	@include rem(padding-right, $grid-spacing);
}

.container {
	@extend .container-fluid;
	
	@include responsive(min-width, $screen-sm) {
		@include rem(max-width, $screen-sm-max-width);
	}
	@include responsive(min-width, $screen-md) {
		@include rem(max-width, $screen-md-max-width);
	}
	@include responsive(min-width, $screen-lg) {
		@include rem(max-width, $screen-lg-max-width);
	}
}

.row {
	overflow: hidden;
	@include rem(margin-left, -$grid-spacing);
	@include rem(margin-right, -$grid-spacing);
	@extend .clearfix;
}

// Generate grid columns
@include grid-columns($grid-columns);